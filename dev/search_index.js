var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"read_libsvm","category":"page"},{"location":"api/#ReadLIBSVM.read_libsvm","page":"API","title":"ReadLIBSVM.read_libsvm","text":"read_libsvm(filepath::String; has_query=false)\nread_libsvm(raw::Vector{UInt8}; has_query=false)\n\nRead data in the LIBSVM format from either a file or a raw byte vector and return it as a tuple containing feature matrix, target labels, and optionally query entries.\n\nArguments\n\nfilepath::String: The path to a file containing data in LIBSVM format. Only one of filepath or raw should be provided.\nraw::Vector{UInt8}: A vector of raw bytes containing data in LIBSVM format. Only one of filepath or raw should be provided.\nhas_query::Bool=false: A boolean flag indicating whether the data includes query entries.\n\nReturns\n\nA tuple (x, y) if has_query is false, where\nx::Matrix{Float64}: The feature matrix as a dense Float64 matrix, where each row represents a data point, and each column represents a feature.\ny::Vector{Float64}: The target labels as a dense vector of Float64.\nA tuple (x, y, q) if has_query is true, where\nx::Matrix{Float64}: The feature matrix as a dense Float64 matrix.\ny::Vector{Float64}: The target labels as a dense vector of Float64.\nq::Vector{Int}: The query entries as a dense vector of Int.\n\n\n\n\n\n","category":"function"},{"location":"#[ReadLIBSVM.jl](https://github.com/jeremiedb/ReadLIBSVM.jl)","page":"Introduction","title":"ReadLIBSVM.jl","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"ReadLIBSVM.jl is Julia package exporting read_libsvm function to parse data stored in the LIBSVM format:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"<label> <query> <feature_id_1>:<feature_value_1> <feature_id_2>:<feature_value_2>","category":"page"},{"location":"#Installation","page":"Introduction","title":"Installation","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Latest:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> Pkg.add(url=\"https://github.com/jeremiedb/ReadLIBSVM.jl\")","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"From General Registry:","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"julia> Pkg.add(\"ReadLIBSVM\")","category":"page"},{"location":"#Usage","page":"Introduction","title":"Usage","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"Two methods are supported by read_libsvm: ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"A path String to the file to be parsed\nA Vector{UInt8} containing the raw binary data (as returned by functions like read or returned from an API like AWS S3)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"path = download(\"https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multiclass/wine.scale\")\ndata = read_libsvm(path)","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"For datasets containing a query id, use the has_query kwarg: ","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"read_libsvm(path; has_query=true)","category":"page"}]
}
